package main

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"
)

type LargeObject struct {
	Id   string `json:"id"`
	Data string `json:"data"`
}

func main() {
	he := func(err error) {
		if err != nil {
			log.Fatal(err)
		}
	}

	dec := json.NewDecoder(strings.NewReader(jsonStream))
	// We expect an object
	t, err := dec.Token()
	he(err)
	if delim, ok := t.(json.Delim); !ok || delim != '{' {
		log.Fatal("Expected object")
	}

	// Read props
	for dec.More() {
		t, err = dec.Token()
		he(err)
		prop := t.(string)
		if t != "items" {
			var v interface{}
			he(dec.Decode(&v))
			log.Printf("Property '%s' = %v", prop, v)
			continue
		}

		// It's the "items". We expect it to be an array
		t, err := dec.Token()
		he(err)
		if delim, ok := t.(json.Delim); !ok || delim != '[' {
			log.Fatal("Expected array")
		}
		// Read items (large objects)
		for dec.More() {
			// Read next item (large object)
			lo := LargeObject{}
			he(dec.Decode(&lo))
			fmt.Printf("Item: %+v\n", lo)
		}
		// Array closing delim
		t, err = dec.Token()
		he(err)
		if delim, ok := t.(json.Delim); !ok || delim != ']' {
			log.Fatal("Expected array closing")
		}
	}

	// Object closing delim
	t, err = dec.Token()
	he(err)
	if delim, ok := t.(json.Delim); !ok || delim != '}' {
		log.Fatal("Expected object closing")
	}
}

const jsonStream = `{
    "somefield": "value",
    "otherfield": "othervalue",
    "items": [
        { "id": "1", "data": "data1" },
        { "id": "2", "data": "data2" },
        { "id": "3", "data": "data3" },
        { "id": "4", "data": "data4" }
    ]
}`





// Start a mock HTTP server that returns 2GB of data in the response. Make a
// HTTP request to this server and print the amount of data read from the
// response.
package main

import (
    "fmt"
    "io"
    "log"
    "net/http"
    "strings"
    "time"
)

const oneMB = 1024 * 1024
const oneGB = 1024 * oneMB
const responseSize = 2 * oneGB

const serverAddr = "localhost:9999"

func startServer() {
    // Mock HTTP server that always returns 2GB of data
    go http.ListenAndServe(serverAddr, http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
        w.Header().Set("Content-length", fmt.Sprintf("%d", responseSize))

        // 1MB buffer that'll be copied multiple times to the response
        buf := []byte(strings.Repeat("x", oneMB))

        for i := 0; i < responseSize/len(buf); i++ {
            if _, err := w.Write(buf); err != nil {
                log.Fatal("Failed to write to response. Error: ", err.Error())
            }
        }
    }))

    // Some grace period for the server to start
    time.Sleep(100 * time.Millisecond)
}

func main() {
    startServer()

    // HTTP client
    req, err := http.NewRequest("GET", "http://"+serverAddr, nil)
    if err != nil {
        log.Fatal("Error creating HTTP request: ", err.Error())
    }

    client := http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        log.Fatal("Error making HTTP request: ", err.Error())
    }

    // Read the response header
    fmt.Println("Response: Content-length:", resp.Header.Get("Content-length"))

    bytesRead := 0
    buf := make([]byte, oneMB)

    // Read the response body
    for {
        n, err := resp.Body.Read(buf)
        bytesRead += n

        if err == io.EOF {
            break
        }

        if err != nil {
            log.Fatal("Error reading HTTP response: ", err.Error())
        }
    }

    fmt.Println("Response: Read", bytesRead, "bytes")
}